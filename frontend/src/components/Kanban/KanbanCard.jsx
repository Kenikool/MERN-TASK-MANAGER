import React, { useState } from 'react';
import { useSortable } from '@dnd-kit/sortable';
import { CSS } from '@dnd-kit/utilities';
import { useNavigate } from 'react-router-dom';
import { 
  Calendar, 
  User, 
  MessageCircle, 
  Paperclip, 
  Clock,\n  AlertTriangle,\n  CheckCircle,\n  MoreVertical,\n  Edit,\n  Trash2\n} from 'lucide-react';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport toast from 'react-hot-toast';\n\nimport { tasksAPI } from '../../utils/api';\nimport { getPriorityColor, formatDate, isOverdue, cn } from '../../utils/cn';\nimport { CompactTimer } from '../TimeTracking/Timer';\n\nconst KanbanCard = ({ task, isDragging = false, className = '' }) => {\n  const navigate = useNavigate();\n  const queryClient = useQueryClient();\n  const [showMenu, setShowMenu] = useState(false);\n\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging: isSortableDragging,\n  } = useSortable({ id: task._id });\n\n  const deleteTaskMutation = useMutation({\n    mutationFn: (id) => tasksAPI.deleteTask(id),\n    onSuccess: () => {\n      queryClient.invalidateQueries(['tasks']);\n      toast.success('Task deleted successfully');\n    },\n    onError: (error) => {\n      toast.error(error.response?.data?.message || 'Failed to delete task');\n    }\n  });\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    opacity: isDragging || isSortableDragging ? 0.5 : 1,\n  };\n\n  const taskIsOverdue = isOverdue(task.dueDate, task.status);\n  const completionPercentage = task.completionPercentage || 0;\n\n  const handleCardClick = (e) => {\n    // Don't navigate if clicking on interactive elements\n    if (e.target.closest('button') || e.target.closest('.dropdown')) {\n      return;\n    }\n    navigate(`/tasks/${task._id}`);\n  };\n\n  const handleEdit = (e) => {\n    e.stopPropagation();\n    navigate(`/tasks/${task._id}/edit`);\n  };\n\n  const handleDelete = (e) => {\n    e.stopPropagation();\n    if (window.confirm('Are you sure you want to delete this task?')) {\n      deleteTaskMutation.mutate(task._id);\n    }\n  };\n\n  const getPriorityIcon = (priority) => {\n    const icons = {\n      low: 'üü¢',\n      medium: 'üü°',\n      high: 'üü†',\n      urgent: 'üî¥'\n    };\n    return icons[priority] || 'üü°';\n  };\n\n  const getStatusIcon = (status) => {\n    const icons = {\n      'todo': 'üìã',\n      'in-progress': 'üîÑ',\n      'review': 'üëÄ',\n      'completed': '‚úÖ',\n      'cancelled': '‚ùå'\n    };\n    return icons[status] || 'üìã';\n  };\n\n  return (\n    <div\n      ref={setNodeRef}\n      style={style}\n      {...attributes}\n      {...listeners}\n      className={cn(\n        \"card bg-base-100 shadow-sm hover:shadow-md transition-all duration-200 cursor-grab active:cursor-grabbing group\",\n        taskIsOverdue && \"border-l-4 border-error\",\n        isDragging && \"rotate-3 shadow-2xl\",\n        className\n      )}\n      onClick={handleCardClick}\n    >\n      <div className=\"card-body p-4\">\n        {/* Task Image */}\n        {task.image && (\n          <figure className=\"mb-3 -mx-4 -mt-4\">\n            <img\n              src={task.image.url}\n              alt={task.title}\n              className=\"w-full h-32 object-cover rounded-t-lg\"\n            />\n          </figure>\n        )}\n\n        {/* Header with Priority and Menu */}\n        <div className=\"flex justify-between items-start mb-2\">\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-sm\">{getPriorityIcon(task.priority)}</span>\n            <span className={cn(\n              \"badge badge-sm\",\n              getPriorityColor(task.priority)\n            )}>\n              {task.priority}\n            </span>\n            {taskIsOverdue && (\n              <span className=\"badge badge-error badge-sm\">\n                <AlertTriangle className=\"w-3 h-3 mr-1\" />\n                Overdue\n              </span>\n            )}\n          </div>\n          \n          <div className=\"dropdown dropdown-end\">\n            <button \n              tabIndex={0} \n              className=\"btn btn-ghost btn-xs btn-circle opacity-0 group-hover:opacity-100 transition-opacity\"\n              onClick={(e) => {\n                e.stopPropagation();\n                setShowMenu(!showMenu);\n              }}\n            >\n              <MoreVertical className=\"w-4 h-4\" />\n            </button>\n            {showMenu && (\n              <ul tabIndex={0} className=\"dropdown-content z-[1] menu p-2 shadow bg-base-100 rounded-box w-52\">\n                <li>\n                  <button onClick={handleEdit}>\n                    <Edit className=\"w-4 h-4\" />\n                    Edit Task\n                  </button>\n                </li>\n                <li>\n                  <button onClick={handleDelete} className=\"text-error\">\n                    <Trash2 className=\"w-4 h-4\" />\n                    Delete Task\n                  </button>\n                </li>\n              </ul>\n            )}\n          </div>\n        </div>\n\n        {/* Title */}\n        <h4 className=\"font-semibold text-base-content mb-2 line-clamp-2 leading-tight\">\n          {task.title}\n        </h4>\n\n        {/* Description */}\n        {task.description && (\n          <p className=\"text-sm text-base-content/60 mb-3 line-clamp-2\">\n            {task.description}\n          </p>\n        )}\n\n        {/* Tags */}\n        {task.tags && task.tags.length > 0 && (\n          <div className=\"flex flex-wrap gap-1 mb-3\">\n            {task.tags.slice(0, 3).map((tag, index) => (\n              <span key={index} className=\"badge badge-outline badge-xs\">\n                {tag}\n              </span>\n            ))}\n            {task.tags.length > 3 && (\n              <span className=\"badge badge-outline badge-xs\">\n                +{task.tags.length - 3}\n              </span>\n            )}\n          </div>\n        )}\n\n        {/* Progress Bar */}\n        {completionPercentage > 0 && (\n          <div className=\"mb-3\">\n            <div className=\"flex justify-between items-center mb-1\">\n              <span className=\"text-xs text-base-content/60\">Progress</span>\n              <span className=\"text-xs font-medium\">{completionPercentage}%</span>\n            </div>\n            <progress\n              className=\"progress progress-primary w-full h-2\"\n              value={completionPercentage}\n              max=\"100\"\n            />\n          </div>\n        )}\n\n        {/* Time Tracking */}\n        <div className=\"mb-3\">\n          <CompactTimer taskId={task._id} taskTitle={task.title} />\n        </div>\n\n        {/* Footer */}\n        <div className=\"flex justify-between items-center text-xs text-base-content/60\">\n          <div className=\"flex items-center gap-3\">\n            {/* Assignee */}\n            {task.assignedTo && (\n              <div className=\"flex items-center gap-1\" title={task.assignedTo.name}>\n                <User className=\"w-3 h-3\" />\n                <span className=\"truncate max-w-[80px]\">{task.assignedTo.name}</span>\n              </div>\n            )}\n\n            {/* Comments Count */}\n            {task.comments && task.comments.length > 0 && (\n              <div className=\"flex items-center gap-1\">\n                <MessageCircle className=\"w-3 h-3\" />\n                <span>{task.comments.length}</span>\n              </div>\n            )}\n\n            {/* Attachments Count */}\n            {task.attachments && task.attachments.length > 0 && (\n              <div className=\"flex items-center gap-1\">\n                <Paperclip className=\"w-3 h-3\" />\n                <span>{task.attachments.length}</span>\n              </div>\n            )}\n          </div>\n\n          {/* Due Date */}\n          {task.dueDate && (\n            <div className={cn(\n              \"flex items-center gap-1\",\n              taskIsOverdue ? \"text-error font-medium\" : \"\"\n            )}>\n              <Calendar className=\"w-3 h-3\" />\n              <span>{formatDate(task.dueDate, 'short')}</span>\n            </div>\n          )}\n        </div>\n\n        {/* Collaborators */}\n        {task.collaborators && task.collaborators.length > 0 && (\n          <div className=\"flex items-center gap-1 mt-2\">\n            <span className=\"text-xs text-base-content/60\">Team:</span>\n            <div className=\"flex -space-x-1\">\n              {task.collaborators.slice(0, 3).map((collaborator, index) => (\n                <div\n                  key={collaborator._id}\n                  className=\"avatar\"\n                  title={collaborator.name}\n                >\n                  <div className=\"w-5 h-5 rounded-full ring-1 ring-base-100\">\n                    {collaborator.avatar ? (\n                      <img src={collaborator.avatar} alt={collaborator.name} />\n                    ) : (\n                      <div className=\"bg-neutral text-neutral-content w-5 h-5 rounded-full flex items-center justify-center text-xs\">\n                        {collaborator.name.charAt(0)}\n                      </div>\n                    )}\n                  </div>\n                </div>\n              ))}\n              {task.collaborators.length > 3 && (\n                <div className=\"avatar\">\n                  <div className=\"w-5 h-5 rounded-full bg-base-300 text-base-content flex items-center justify-center text-xs font-medium\">\n                    +{task.collaborators.length - 3}\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default KanbanCard;